# mihomo (Clash Meta) 懒人配置
# 版本 V1.15-241205
# https://gist.github.com/liuran001/5ca84f7def53c70b554d3f765ff86a33
# https://obdo.cc/meta
# 作者: 笨蛋ovo (bdovo.cc)
# Telegram: https://t.me/baka_not_baka
# 关注我的 Telegram 频道谢谢喵 https://t.me/s/BDovo_Channel
# 修改自官方示例规则 https://wiki.metacubex.one/example/#meta
# 转载请保留此注释
# 尽量添加了较为详尽的注释，不理解的地方建议对照 虚空终端 (Clash Meta) Docs 进行理解
# 虚空终端 (Clash Meta) Docs 地址: https://wiki.metacubex.one
# 不理解的地方不要乱动，如果你是小白，请按下 `Ctrl + F` 搜索 `基础配置`，只修改此部分

# true 是启用
# false 是禁用
 
# 远程订阅相关 延迟检测 URL
  # 自动更新订阅时间，单位为秒
    # url: https://cp.cloudflare.com
    # interval:节点连通性检测时间，单位为秒
    # timeout:节点超时延迟，单位为毫秒
    # tolerance:节点自动切换差值，单位为毫秒
DYUrlTest: &DYUrlTest
  type: http
  interval: 43200   # 自动更新订阅时间，单位为秒
  health-check:
    enable: true
    url: https://www.gstatic.com/generate_204   # url: https://cp.cloudflare.com
    interval: 3000  # 节点连通性检测时间，单位为秒
    timeout: 3000   # 节点超时延迟，单位为毫秒
    tolerance: 500  # 节点自动切换差值，单位为毫秒
    lazy: true

# 基础配置
# --------------------------------------------------
# 如果你是小白，那么你只需要修改分割线以内的内容
# 漏网之鱼部分保持不动即可

# 也可以把分割线以内的内容粘贴到您使用代理工具的「覆写」功能，然后在覆写中进行修改
# 使用覆写时可以直接将此配置文件作为订阅链接进行订阅
# https://gh-proxy.com/https://gist.githubusercontent.com/liuran001/5ca84f7def53c70b554d3f765ff86a33/raw/c1d33956db7097252b88a6c06ed76f32526747c4/config.yaml

# 如果你需要使用大于两个机场，在下方 `dingyue` 处添加 `订阅三` （名字可以自己取），然后在 `proxy-providers` 照例添加订阅链接即可
# 反之，如果你只需要使用一个，那么将 `订阅二` 前添加 `#` 进行注释即可

# 订阅名，记得修改成自己的
# 添删订阅在这里和下方订阅链接依葫芦画瓢就行
dingyue: &dingyue
  # 如果不希望自动切换请将下面两行注释对调
  # type: select
  # type: url-test
  use:
    - 本地配置
    - 订阅一
    - 订阅二

# 订阅链接
# 对于订阅来说，path 为选填项，但建议启用
# 本地配置可以只填 path
proxy-providers:
  
  本地配置:
    <<: *DYUrlTest
    # path: ./proxy_provider/clashmeta.yaml
    # url: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/clashmetatest.yaml"
    # 默认只允许存储在 mihomo 的 Home Dir，如果想存储到任意位置，添加环境变量 SKIP_SAFE_PATH_CHECK=1
    path: "F:/GoldBridge/clash/clash-main/clashmetatest.yaml" 
    # # 如需要为该订阅组节点添加前缀，取消下面两行注释
    # override:
    #   additional-prefix: "[本地配置]"

  # 订阅一:
  #   <<: *DYUrlTest
  #   path: ./proxy_provider/dingyue1.yaml
  #   url: "https://suo.yt/xGo1FPI"
  #   # 如需要为该订阅组节点添加前缀，取消下面两行注释
  #   override:
  #     additional-prefix: "[1]"

  # 订阅二:
  #   <<: *DYUrlTest
  #   path: ./proxy_provider/dingyue2.yaml
  #   url: "https://flynb.site/sub?token=oLKUUBC7cJPmouRzlnw2bg&tag=clash"
  #   # 如需要为该订阅组节点添加前缀，取消下面两行注释
  #   override:
  #     additional-prefix: "[2]"

# 小白请不要继续随意修改以下设置
# 若需修改请参阅文档 https://wiki.metacubex.one
# --------------------------------------------------

# 用于下载订阅时指定UA
global-ua: clash

# socks5/http 端口
mixed-port: 7890
socks-port: 7891
port: 7892
redir-port: 7893
tproxy-port: 7894

# 规则模式：rule（规则） / global（全局代理）/ direct（全局直连）/ script (脚本)
mode: rule
# 设置日志输出级别 (5 个级别：silent / error / warning / info / debug）
log-level: info
# 允许局域网连接
allow-lan: true
# 监听IP白名单，可绑定单个IPv4和v6地址，"*" 为绑定所有IP地址，仅在将allow-lan设置为true时适用
bind-address: "*"
# ipv6 支持
ipv6: true
# 是否允许 UDP 通过代理，默认为 false
udp: true

# Meta 内核特性 https://wiki.metacubex.one/config/general
# 开启统一延迟时，会进行两次延迟测试，以消除连接握手等带来的不同类型节点的延迟差异，可选值 true/false
# 更换延迟计算方式,去除握手等额外延迟
unified-delay: true
# TCP 并发，可选值 true/false
# 同时对所有ip进行连接，返回延迟最低的地址
tcp-concurrent: true
# 控制是否让 Clash 去匹配进程，always 开启，强制匹配所有进程，strict 默认，由 Clash 判断是否开启，off 不匹配进程，推荐在路由器上使用此模式
# 进程匹配模式
# 路由器上请设置为 off
# always 开启，强制匹配所有进程
# strict 默认，由 Clash 判断是否开启
# off 不匹配进程，推荐在路由器上使用此模式
find-process-mode: strict
# 全局客户端指纹
# 全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint，目前支持开启 TLS 传输的 TCP/grpc/WS/HTTP , 支持协议有 VLESS,Vmess 和 trojan
global-client-fingerprint: random # 随机指纹

# 外部控制端口
# 外部控制器，可以使用 RESTful API 来控制你的 Clash 内核，API 监听地址，你可以将 127.0.0.1 修改为 0.0.0.0 来监听所有 IP
external-controller: 127.0.0.1:9090
# 自定义 API 的访问密钥
secret: ""
# 可以将静态网页资源 (比如 Clash-dashboard) 运行在 Clash API, 路径为 API 地址/ui，可以为绝对路径，或者 Clash 工作目录的相对路径
external-ui: ui
# 自定义外部用户界面下载地址
external-ui-url: "https://gh-proxy.com/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 数据库部分
# 自动更新 GEO
geo-auto-update: true
# 更新间隔，单位为小时
geo-update-interval: 72
# 更改 geoip 使用文件，mmdb 或者 dat，可选 true/false,true为 dat，此项有默认值 false
geodata-mode: true # GeoIP格式，false为MMDB，true为DAT
# GEO 文件加载模式，standard：标准加载器 memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值)
geodata-loader: standard
# Geo 数据库下载地址
# 源地址 https://github.com/MetaCubeX/meta-rules-dat
# 可以更换镜像站但不要更换漏网之鱼数据库，可能导致无法启动
geox-url:
  geoip: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.dat"
  geosite: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country.mmdb"
  asn: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"

# 策略组选择和fakeip缓存
profile:
  # 储存 API 对策略组的选择，以供下次启动时使用
  store-selected: true
  # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址
  store-fake-ip: true

lan-allowed-ips:
  - 0.0.0.0/0
  - ::/0
lan-disallowed-ips: []
# socks5远程访问的密码
authentication:
  - []
skip-auth-prefixes:
  - 127.0.0.1/32
# tcp保持连接
# 缓解移动设备耗电问题
# https://github.com/vernesong/OpenClash/issues/2614
keep-alive-idle: 600
keep-alive-interval: 1800


# 自动同步时间以防止时间不准导致无法正常联网
ntp:
  enable: true
  # 是否同步至系统时间，需要 root/管理员权限
  write-to-system: false
  server: time.apple.com
  port: 123
  interval: 30

# 域名嗅探
sniffer:
  enable: true                       # 是否启用sniffer
  force-dns-mapping: true            # 对 redir-host 类型识别的流量进行强制嗅探
  parse-pure-ip: true                # 对所有未获取到域名的流量进行强制嗅探
  override-destination: true         # 是否使用嗅探结果作为实际访问，默认为 true
  sniff:
    TLS:
      ports: [443, 8443]
    HTTP:
      ports: [80, 8080-8880]         # ports字段，表示端口范围。示例：ports: [80, 8080-8880]
      override-destination: true     # override-destination字段（可选），用于覆盖全局override-destination设置
    QUIC:
      ports: [443, 8443]
  force-domain:                      # 需要强制嗅探的域名（默认情况下只对IP进行嗅探）
    - '+.v2ex.com'
  skip-domain:                       # 需要跳过嗅探的域名。主要解决部分站点sni字段非域名，导致嗅探结果异常的问题，如米家设备Mijia Cloud
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"

# tun 模式
tun:
  enable: false  # enable true
  device: Mihomo
  stack: mixed  # or gvisor system
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  route-exclude-address: []
  mtu: 1500

# dns 设置
dns:
  # 是否启用，如为 false，则使用系统 DNS 解析
  enable: true
  # DNS 服务监听，仅支持 udp
  listen: :1053
  # IPV6解析开关；如果为false，将返回ipv6结果为空
  ipv6: false
  # 路由器个人建议使用 redir-host 以最佳兼容性
  # 漏网之鱼设备可以使用 fake-ip
  # 模式：redir-host或fake-ip
  enhanced-mode: fake-ip
  # Fake-IP 解析地址池
  fake-ip-range: 198.18.0.0/16
  # 可选 blacklist/whitelist，默认blacklist，whitelist 即只有匹配成功才返回 fake-ip
  fake-ip-filter-mode: blacklist
  # fakeip 过滤，以下地址不会下发 fakeip 映射用于连接
  fake-ip-filter:
    - "*"
    # LAN
    - "+.lan"
    - "+.local"
    # ntp
    - "time.*.com"
    - "time.*.gov"
    - "time.*.edu.cn"
    - "time.*.apple.com"
    - "time-ios.apple.com"
    - "ntp.*.com"
    # windows 本地连接检测
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    # QQ登录
    - "localhost.ptlogin2.qq.com"
    - "localhost.sec.qq.com"
    - "+.qq.com"
    - "+.tencent.com"
    # Steam
    - "+.steamcontent.com"
    # Microsoft Xbox
    - "xbox.*.*.microsoft.com"
    - "*.*.xboxlive.com"
    - "xbox.*.microsoft.com"
    - "xnotify.xboxlive.com"
    # STUN
    - "stun.*.*"
    - "+.stun.*.*"
    - "+.stun.*.*.*"
    # Netflix
    - "+.nflxvideo.net"
    # Bilibili
    - "*.mcdn.bilivideo.cn"
    # 米家
    - "Mijia Cloud"
    # Xiaomi
    - "+.market.xiaomi.com"
    - "WORKGROUP"
  # 是否回应配置中的 hosts，默认 true
  use-hosts: true
  # 是否查询系统 hosts，默认 true
  use-system-hosts: true
  # 默认的域名解析服务器
  nameserver:
    - 'https://dns.alidns.com/dns-query'
    - 'https://doh.pub/dns-query'
  # 指定域名查询的解析服务器，可使用 geosite, 优先于 nameserver/fallback 查询
  nameserver-policy:
    geosite:cn,private:
      - 'https://doh.pub/dns-query'
      - 'https://dns.alidns.com/dns-query'
    geosite:!cn,!private: 
      - 'tls://dns.google'
      - 'tls://cloudflare-dns.com'
  # 后备域名解析服务器，一般情况下使用境外 DNS, 保证结果可信
  # 配置 fallback后默认启用 fallback-filter,geoip-code为 cn
  fallback:
    - 'tls://8.8.4.4' # dns
    - 'tls://1.1.1.1' # dns
  # 后备域名解析服务器筛选，满足条件的将使用 fallback结果或只使用 fallback解析
  fallback-filter:
    # 是否启用 geoip 判断
    geoip: true
    geoip-code: CN
    # geosite 列表的内容被视为已污染，匹配到 geosite 的域名，将只使用 fallback解析，不去使用 nameserver
    geosite:
      - gfw
    # 书写内容为 IP/掩码,这些网段的结果会被视为污染，nameserver解析出这些结果时将会采用 fallback的解析结果
    ipcidr:
      - 240.0.0.0/4
      - 0.0.0.0/32
    # 这些域名被视为已污染，匹配到这些域名，会直接使用 fallback解析，不去使用 nameserver
    domain:
      - '+.google.com'
      - '+.facebook.com'
      - '+.youtube.com'
      - '+.instagram.com'
      - '+.twitter.com'
      - '+.chatgpt.com'
  # dns 连接遵守路由规则，需配置 proxy-server-nameserver
  respect-rules: false
  # 代理服务器域名解析，仅用于解析代理节点的域名，如果不填则遵循nameserver-policy、nameserver和fallback的配置
  proxy-server-nameserver:
    - 'https://120.53.53.53/dns-query'
    - 'https://223.5.5.5/dns-query'
    - 'https://doh.pub/dns-query'
  # 直连解析服务器，用于direct出口域名解析的 DNS 服务器，如果不填则遵循nameserver-policy、nameserver和fallback的配置
  direct-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  # 是否遵循nameserver-policy，默认为不遵守，仅当direct-nameserver不为空时生效
  direct-nameserver-follow-policy: false
  # 默认 DNS, 用于解析 DNS 服务器 的域名
  default-nameserver:
    - '223.5.5.5'
    - '223.6.6.6'
    - '119.29.29.29'
    - '114.114.114.114'

# 多入站端口设置
# listeners:
#   - name: hk
#     type: mixed
#     port: 12991
#     proxy: 香港

#   - name: tw
#     type: mixed
#     port: 12992
#     proxy: 台湾

#   - name: sg
#     type: mixed
#     port: 12993
#     proxy: 新加坡

# proxies:
  # - name: "WARP"
  #   type: wireguard
  #   server: engage.cloudflareclient.com
  #   port: 2408
  #   ip: "172.16.0.2/32"
  #   ipv6: "2606::1/128"        # 自行替换
  #   private-key: "private-key" # 自行替换
  #   public-key: "public-key"   # 自行替换
  #   udp: true
  #   reserved: "abba"           # 自行替换
  #   mtu: 1280
  #   dialer-proxy: "WARP前置"
  #   remote-dns-resolve: true
  #   dns:
  #     - https://dns.cloudflare.com/dns-query

# 锚点
# 分组
only: &only {type: select, proxies: [节点选择, 手动选择, 自动选择, DIRECT]}
Select: &Select {type: select, proxies: [手动选择, 负载均衡, DIRECT, 自动选择, 香港节点, 日本节点, 狮城节点, 美国节点, 广告拦截]}
UrlTest: &UrlTest {type: url-test, include-all: true, url: 'https://www.gstatic.com/generate_204', interval: 300, timeout: 3000, tolerance: 50}
FallBack: &FallBack {type: fallback, include-all: true, url: 'https://www.gstatic.com/generate_204', interval: 300, timeout: 2000, tolerance: 50}
LoadBalance: &LoadBalance {type: load-balance, include-all: true, filter: "(?i)(.*(-2.|-3.|-4.|-5.|-6.|-7.|-8.|-9.|-10.|-11.|-12.|-13.|-14.|-15.|-16.|美国|US|巴西|印度|日本|JP))", url: "http://www.google.com/generate_204", interval: 300, strategy: consistent-hashing, timeout: 2000}

shoudong: &shoudong {type: select, include-all: true}

# 策略组
proxy-groups:
  # 使用 WARP 的用户需要手动在下方的 proxies 字段内添加 WARP
  # 例如 [WARP, 全部节点, 自动选择, 香港, 台湾, 日本, 新加坡, 美国, 其它地区, DIRECT],
  - {name: 节点选择, <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/adjust.svg",}
  - {name: 手动选择, <<: *dingyue, <<: *shoudong, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Orz-3/mini/master/Color/Static.png"}
  - {name: 香港节点, <<: *dingyue, <<: *shoudong, filter: "(?i)港|HK|Hong", icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png"}
  - {name: 日本节点, <<: *dingyue, <<: *shoudong, filter: "(?i)日|东京|JP|Japan", icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png"}
  - {name: 狮城节点, <<: *dingyue, <<: *shoudong, filter: "(?i)新|坡|SG|Singapore", icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png"}
  - {name: 美国节点, <<: *dingyue, <<: *shoudong, filter: "(?i)美|US|UM|States|American", icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png"}
  - {name: 负载均衡, <<: *dingyue, <<: *LoadBalance, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/LoadBalance.svg"}
  - {name: 自动选择, <<: *dingyue, <<: *UrlTest, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/speed.svg"}
  - {name: 漏网之鱼,   !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/fish.svg"}
  - {name: Apple,     !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/apple.svg"}
  - {name: Cloudflare,!!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/cloudflare.svg"}
  - {name: ChatGPT,   !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/chatgpt.svg"}
  - {name: Google,    !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/google.svg"}
  - {name: GitHub,    !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/github.svg"}
  - {name: Bing,      !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/bing.svg"}
  - {name: OneDrive,  !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/onedrive.svg"}
  - {name: Microsoft, !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/microsoft.svg"}
  - {name: NETFLIX,   !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/netflix.svg"}
  - {name: Speedtest, !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/speed.svg"}
  - {name: TikTok,    !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/tiktok.svg"}
  - {name: Telegram,  !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/telegram.svg"}
  - {name: Twitter,   !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/twitter.svg"}
  - {name: YouTube,   !!merge <<: *Select, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/youtube.svg"}
  # https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/YouTube.png
  # https://mirror.ghproxy.com/https://raw.githubusercontent.com/Orz-3/mini/master/Color/Google.png
  # https://fastly.jsdelivr.net/gh/shindgewongxj/WHATSINStash@master/icon/bing.png
  # 漏网之鱼就是所有规则没匹配到的
  # 可以理解为 ACL4SSR 配置里的 漏网之鱼
  # 换言之，漏网之鱼走代理就是绕过中国大陆地址，不走就是 GFWList 模式
  # - {name: 漏网之鱼,   !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/fish.svg"}
  # - {name: Apple,     !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/apple.svg"}
  # - {name: Cloudflare,!!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/cloudflare.svg"}
  # - {name: ChatGPT,   !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/chatgpt.svg"}
  # - {name: Google,    !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/google.svg"}
  # - {name: GitHub,    !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/github.svg"}
  # - {name: Bing,      !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/bing.svg"}
  # - {name: OneDrive,  !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/onedrive.svg"}
  # - {name: Microsoft, !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/microsoft.svg"}
  # - {name: NETFLIX,   !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/netflix.svg"}
  # - {name: Speedtest, !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/speed.svg"}
  # - {name: TikTok,    !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/tiktok.svg"}
  # - {name: Telegram,  !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/telegram.svg"}
  # - {name: Twitter,   !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/twitter.svg"}
  # - {name: YouTube,   !!merge <<: *only, icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/youtube.svg"}
  - {name: 全球直连, type: select, proxies: [DIRECT], icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/link.svg"}
  - {name: 广告拦截, type: select, proxies: [REJECT], icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/block.svg"}
  - {name: GLOBAL, <<: *shoudong,proxies: [节点选择, 负载均衡, 自动选择, 漏网之鱼], icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Global.png"}
  # - {
  #     name: 节点选择,
  #     type: select,
  #     proxies:
  #       [自动选择, 新加坡, 美国, DIRECT],
  #   }
  # 这里的 dns 指海外解析 dns 走的节点，一般跟随节点选择即可
  # - { name: dns, <<: *Select }
  # WARP 配置链式出站
  # - { name: WARP前置, <<: *Select, exclude-type: "wireguard" }

  # - {
  #     name: 国内,
  #     type: select,
  #     proxies:
  #       [
  #         DIRECT,
  #         节点选择,
  #         # 香港,
  #         # 台湾,
  #         # 日本,
  #         新加坡,
  #         美国,
  #         # 其它地区,
  #         # 全部节点,
  #         自动选择,
  #       ],
  #   }

  # 分隔,下面是地区分组
  # - { name: 香港, <<: *dingyue, filter: "(?i)港|hk|hongkong|hong kong" }
  # - { name: 台湾, <<: *dingyue, filter: "(?i)台|tw|taiwan" }
  # - { name: 日本, <<: *dingyue, filter: "(?i)日本|jp|japan" }
  # - { name: 美国, <<: *dingyue, filter: "(?i)美|us|unitedstates|united states" }
  # - { name: 新加坡, <<: *dingyue, filter: "(?i)(新|sg|singapore)" }
  # - {
  #     name: 其它地区,
  #     <<: *dingyue,
  #     filter: "(?i)^(?!.*(?:🇭🇰|🇯🇵|🇺🇸|🇸🇬|🇨🇳|港|hk|hongkong|台|tw|taiwan|日|jp|japan|新|sg|singapore|美|us|unitedstates)).*",
  #   }

rules:
  # 若需禁用 QUIC 请取消注释 QUIC 两条规则
  # 防止 YouTube 等使用 QUIC 导致速度不佳, 禁用 443 端口 UDP 流量（不包括国内）
  # - AND,(AND,(DST-PORT,443),(NETWORK,UDP)),(NOT,((GEOSITE,cn))),REJECT # quic
  # - AND,(AND,(DST-PORT,443),(NETWORK,UDP)),(NOT,((GEOIP,CN))),REJECT # quic

  - DOMAIN,clash.razord.top,DIRECT
  - DOMAIN,yacd.metacubex.one,DIRECT
  - DOMAIN,yacd.haishan.me,DIRECT
  - DOMAIN,d.metacubex.one,DIRECT

  # - RULE-SET,AWAvenue-Ads,🛑 广告拦截
  - RULE-SET,AD-Lite,REJECT
  - RULE-SET,AD,REJECT
  # - RULE-SET,EasyList,REJECT
  - RULE-SET,EasyListChina,REJECT
  # - RULE-SET,EasyPrivacy,REJECT
  - RULE-SET,ProgramAD,REJECT
  - DOMAIN,apac2.8d5fff6dafa213ef6b9210db39c5f56e.r2.cloudflarestorage.com,DIRECT
  - DOMAIN-SUFFIX,skyearth.xyz,DIRECT

  #目的域名后缀规则
  - DOMAIN-SUFFIX,vip8.3sybf.com:443,DIRECT
  - DOMAIN-SUFFIX,surrit.com,DIRECT
  - DOMAIN-SUFFIX,sixyik.com,DIRECT
  - DOMAIN-SUFFIX,javxxx.me,DIRECT
  - DOMAIN-SUFFIX,fapnfuck.com,DIRECT
  - DOMAIN-SUFFIX,cdnstatic.jappornxl.com,DIRECT
  - DOMAIN-SUFFIX,ap-drop-monst.mushroomtrack.com,DIRECT
  - DOMAIN-SUFFIX,googleapis.cn,节点选择
  - DOMAIN-SUFFIX,xn--ngstr-lra8j.com,节点选择
  - DOMAIN-SUFFIX,xn--ngstr-cn-8za9o.com,节点选择
  - DOMAIN-SUFFIX,eporner.com,节点选择
  # - DOMAIN-SUFFIX,bilibili.com,DIRECT,tcp   #【Meta专属】可指定协议类型(tcp/udp)

  #目的域名规则
  - DOMAIN,github.com,节点选择
  - DOMAIN,twitter.com,节点选择
  - DOMAIN,youtube.com,节点选择
  - DOMAIN,google.com,节点选择
  #目的域名关键字规则
  - DOMAIN-KEYWORD,google,节点选择

  #来源IP规则
  - SRC-IP-CIDR,192.168.1.201/32,DIRECT
  #目的端口规则
  - DST-PORT,123/136/137-139,DIRECT         #【Meta专属】可指定端口范围
    #来源端口规则
  - SRC-PORT,123/136/137-139,DIRECT,udp     #【Meta专属】可指定端口范围

    #目的IP规则
  # 绕过局域网地址 #no-resolve:不解析，可应用于GEOIP, IP-CIDR
  - IP-CIDR,10.0.0.0/8,DIRECT
  - IP-CIDR,172.16.0.0/12,DIRECT
  - IP-CIDR,192.168.0.0/16,DIRECT
  - IP-CIDR,100.64.0.0/10,DIRECT
  - IP-CIDR,127.0.0.0/8,DIRECT

  #【Meta专属】GEOSITE规则
  - GEOSITE,category-ads-all,REJECT
  - GEOSITE,github,GitHub
  - GEOSITE,twitter,Twitter
  - GEOSITE,youtube,YouTube
  - GEOSITE,telegram,Telegram
  - GEOSITE,google,Google
  - GEOSITE,google-cn,Google # Google CN 不走代理会导致香港等地区节点 Play Store 异常
  - GEOSITE,cloudflare,Cloudflare
  - GEOSITE,netflix,NETFLIX
  - GEOSITE,tiktok,TikTok
  # - GEOSITE,spotify,Spotify
  # - GEOSITE,steam,Steam
  - GEOSITE,steam@cn,DIRECT
  - GEOSITE,apple@cn,DIRECT
  - GEOSITE,apple-cn,DIRECT
  - GEOSITE,icloud@cn,DIRECT
  - GEOSITE,bing,Bing
  - GEOSITE,onedrive,OneDrive
  - GEOSITE,microsoft,Microsoft
  - GEOSITE,microsoft@cn,DIRECT
  - GEOSITE,geolocation-cn,DIRECT
  - GEOSITE,geolocation-!cn,漏网之鱼

  # GEOIP规则  
  - GEOIP,google,Google
  - GEOIP,netflix,NETFLIX
  - GEOIP,telegram,Telegram
  - GEOIP,twitter,Twitter
  - GEOIP,private,DIRECT
  - GEOSITE,CN,DIRECT
  - GEOIP,LAN,DIRECT
  - GEOIP,CN,DIRECT

  # 广告拦截
  # - RULE-SET,AWAvenue-Ads,广告拦截
  - RULE-SET,AD-Lite,REJECT
  - RULE-SET,AD,REJECT
  # - RULE-SET,EasyList,REJECT
  - RULE-SET,EasyListChina,REJECT
  # - RULE-SET,EasyPrivacy,REJECT
  - RULE-SET,ProgramAD,REJECT

  - MATCH,漏网之鱼

rule-anchor:
  ip: &ip         {type: http, interval: 86400, behavior: ipcidr,     format: yaml}
  domain: &domain {type: http, interval: 86400, behavior: domain,     format: yaml}
  class: &class   {type: http, interval: 86400, behavior: classical,  format: text}

# 规则订阅
rule-providers:
  # AWAvenue-Ads:
  #   type: http
  #   behavior: domain
  #   format: yaml
  #   path: ./providers/rule/AWAvenue-Ads.yaml
  #   url: "https://gh-proxy.com/https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/refs/heads/main/Filters/AWAvenue-Ads-Rule-Clash.yaml"
  #   interval: 86400
  # ADs:
  #   type: http
  #   behavior: domain
  #   format: yaml
  #   path: ./providers/rule/ADs.yaml
  #   url: "https://gh-proxy.com/https://raw.githubusercontent.com/217heidai/adblockfilters/main/rules/adblockmihomo.yaml"
  #   interval: 86400
  AD-Lite:
    <<: *domain
    path: ./providers/rule/AD-Lite.yaml
    url: "https://gh-proxy.com/https://raw.githubusercontent.com/217heidai/adblockfilters/main/rules/adblockmihomolite.yaml"
  AD:
    <<: *domain
    url: "https://gh-proxy.com/https://raw.githubusercontent.com/earoftoast/clash-rules/main/AD.yaml"
    path: ./rules/AD.yaml
    
  EasyList:
    <<: *domain
    url: "https://gh-proxy.com/https://raw.githubusercontent.com/earoftoast/clash-rules/main/EasyList.yaml"
    path: ./rules/EasyList.yaml
    
  EasyListChina:
    <<: *domain
    url: "https://gh-proxy.com/https://raw.githubusercontent.com/earoftoast/clash-rules/main/EasyListChina.yaml"
    path: ./rules/EasyListChina.yaml

  # EasyPrivacy:
  #   type: http
  #   behavior: domain
  #   format: yaml
  #   url: "https://gh-proxy.com/https://raw.githubusercontent.com/earoftoast/clash-rules/main/EasyPrivacy.yaml"
  #   path: ./rules/EasyPrivacy.yaml
  #   interval: 86400

  ProgramAD:
    <<: *domain
    url: "https://gh-proxy.com/https://raw.githubusercontent.com/earoftoast/clash-rules/main/ProgramAD.yaml"
    path: ./rules/ProgramAD.yaml
  # 秋风广告拦截规则
  # https://awavenue.top
  # 由于 Anti-AD 误杀率高，本项目已在 1.11-241024 版本更换秋风广告规则
  AWAvenue-Ads:
    <<: *domain
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/AWAvenue-Ads.yaml
    url: "https://gh-proxy.com/https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/refs/heads/main/Filters/AWAvenue-Ads-Rule-Clash.yaml"
