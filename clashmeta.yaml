#这里是订阅更新和延迟测试相关的
DY_urltest: &DY_urltest
  proxy: DIRECT
  interval: 43200
  health-check: {enable: true, url: https://www.gstatic.com/generate_204, interval: 600, timeout: 8000, tolerance: 100, lazy: true}
  override:
    proxy-name:
    - pattern: "(?i)(TG@ZDYZ2|印度|拒绝|直连|群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author|traffic)"
      target: ""

# proxy 相关
Dingyue: &Dingyue
  # 必须选择一种类型，最好select
  # type类型有 select url-test fallback load-balance
  type: select
  # type: url-test
  include-all: true
  use:
    - 本地配置
    # - 电报ZDYZ2

proxy-providers:
  本地配置:
    # type: file
    # path: "F:/GoldBridge/clash/clash-main/clashmetatest.yaml"
    type: http
    path: ./proxy-providers/clashmeta.yaml
    url: "https://gh-proxy.com/https://github.com/Heart-Stealer/myclash/raw/main/clashmetatest.yaml"
    <<: *DY_urltest

  # 电报ZDYZ2:
  #   type: http
  #   path: ./proxy-providers/zdyz2.yaml
  #   url: "https://sublink.634676.xyz/sub"
  #   <<: *DY_urltest
  #   path: ./proxy-providers/dingyue1.yaml
  #   url: "https://sub.vip.sd/JPa6vvFgygVtNP2sGJ2r/download/YuanZhang"
  #   <<: *DY_urltest
  #   path: ./profiles/proxies/dingyue2.yaml
  #   url: "https://flynb.site/sub?token=oLKUUBC7cJPmouRzlnw2bg&tag=clash"
  #   <<: *DY_urltest
    # override:
    #   # additional-prefix: "[2️⃣]"
    #   additional-suffix: "[2️⃣]"

# 全局配置 
mixed-port: 7890
socks-port: 7891
port: 7892
# 安卓手机需要禁用 redir-port和tproxy
# 关闭 REDIRECT
# redir-port: 0
# 关闭 TPROXY
# tproxy-port: 0
redir-port: 7893
tproxy-port: 7894
# rule/ global/ direct
mode: rule
# silent/ error/ warning/ info/ debug
log-level: info
# ipv6: true
ipv6: false
allow-lan: true
bind-address: "*"
udp: true
# 开启统一延迟时，会进行两次延迟测试，以消除连接握手等带来的不同类型节点的延迟差异，可选值 true/false
unified-delay: true
# TCP 并发，可选值 true/false
tcp-concurrent: true
# 控制是否让 Clash 去匹配进程，always 开启，强制匹配所有进程，strict 默认，由 Clash 判断是否开启，off 不匹配进程，推荐在路由器上使用此模式
# always/strict/off
# 路由器 off
find-process-mode: strict
# find-process-mode: off
# 全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint，目前支持开启 TLS 传输的 TCP/grpc/WS/HTTP , 支持协议有 VLESS,Vmess 和 trojan
global-client-fingerprint: chrome
# 连接空闲后多久发送探测包
keep-alive-idle: 600
# TCP Keep Alive 间隔,单位分钟
keep-alive-interval: 30
# # 禁用保持活跃探测, 在 Android 默认为 true
# disable-keep-alive: false

profile:
  # 储存 API 对策略组的选择，以供下次启动时使用
  store-selected: true
  # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址
  store-fake-ip: true

# 控制面板
# API 监听地址
external-controller: '0.0.0.0:9090'
# 外部用户界面路径，(默认:工作目录/ui)，可以为绝对路径，或者 Mihomo 工作目录的相对路径
external-ui: ui
# 自定义外部用户界面名字
external-ui-name: zashboard
external-ui-url: "https://gh-proxy.com/https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip"
# 自定义 API 的访问密钥
secret: "963."
# uci set nikki.mixin.ui_url='https://github.com/Zephyruso/zashboard/releases/latest/download/dist-cdn-fonts.zip'
# uci set nikki.mixin.ui_url='https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip'
# uci set nikki.mixin.ui_url='https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'
# uci set nikki.mixin.ui_url='https://github.com/MetaCubeX/Yacd-meta/archive/refs/heads/gh-pages.zip'
# uci set nikki.mixin.ui_url='https://github.com/MetaCubeX/Razord-meta/archive/refs/heads/gh-pages.zip'
# 自动更新 GEO
geo-auto-update: true
# 更新间隔，单位为小时
geo-update-interval: 72
# standard/memconservative
# GEO 文件加载模式, standard: 标准加载器 memconservative: 专为内存受限 (小内存) 设备优化的加载器 (默认值)
# 路由器
geodata-loader: standard
# geodata-loader: memconservative
# 更改 geoip 使用文件，mmdb 或者 dat，可选 true/false,true为 dat，此项有默认值 false
geodata-mode: false
geox-url:
  geosite: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  geoip: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.dat"
  mmdb: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country.mmdb"
  asn: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"

# 嗅探
sniffer:
  enable: true                       # 是否启用sniffer
  ## 对所有未获取到域名的流量进行强制嗅探
  parse-pure-ip: true                # 对所有未获取到域名的流量进行强制嗅探
  ## 对 redir-host 类型识别的流量进行强制嗅探
  ## 如：Tun、Redir 和 TProxy 并 DNS 为 redir-host 皆属于
  force-dns-mapping: true            # 对 redir-host 类型识别的流量进行强制嗅探
  # 是否使用嗅探结果作为实际访问，默认 true
  # 全局配置，优先级低于 sniffer.sniff 实际配置
  override-destination: true         # 是否使用嗅探结果作为实际访问，默认为 true
  sniff:
    HTTP:
      ports: [80, 443, 8080-8880]    # ports字段，表示端口范围。示例：ports: [80, 8080-8880]
      override-destination: true     # override-destination字段（可选），用于覆盖全局override-destination设置
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:                      # 需要强制嗅探的域名（默认情况下只对IP进行嗅探）
    # - '+' # Force all domain to use sniffer
    - "google.com"
    - "+.v2ex.com"
    - "+.netflix.com"
    - "+.nflxvideo.net"
    - "+.amazonaws.com"
    - "+.media.dssott.com"
  ## 对嗅探结果进行跳过
  skip-domain:                       # 需要跳过嗅探的域名。主要解决部分站点sni字段非域名，导致嗅探结果异常的问题，如米家设备Mijia Cloud
    - "+.baidu.com"
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "*.push.apple.com"
    - "*.apple.com"
    - "*.wechat.com"
    - "*.qpic.cn"
    - "*.qq.com"
    - "*.wechatapp.com"
    # vivo
    - "*.vivox.com"
    - "+.vivo.com.cn"
    # 向日葵服务
    - "*.oray.com"
    - "*.sunlogin.net"
    - "+.pages.dev"
    - "*.kyarucloud.moe"
  skip-src-address: # 对于来源ip跳过嗅探
    - 192.168.0.3/32
  skip-dst-address: # 对于目标ip跳过嗅探
    - 192.168.0.3/32

# 入站  
tun:
# 路由器 true
  # 启用 tun
  # enable: true
  enable: false
  # system/gvisor/mixed
  # https://wiki.metacubex.one/config/inbound/tun/?h=android#stack
  stack: mixed
  # 自动设置全局路由，可以自动将全局流量路由进入 tun 网卡
  auto-route: true
  # 启用 auto-route 时执行严格的路由规则
  strict-route: true
  # 是否自动重定向网络流量
  auto-redirect: true                
  # 自动选择流量出口接口，多出口网卡同时连接的设备建议手动指定出口网卡
  auto-detect-interface: true
  # dns 劫持，将匹配到的连接导入内部 dns 模块，不书写协议则为 udp://
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  # 路由器
  device: Mihomo
  mtu: 9000
  gso: true
  gso-max-size: 65536
  endpoint-independent-nat: false

# hosts:
#   localhost:
#     - 127.0.0.1
#     - 192.168.1.1
#   mywifi.com:
#     - 127.0.0.1
#     - 192.168.1.1

# DNS模块
dns:
  # 关闭将使用系统 DNS
  enable: true
  # DNS 监听地址
  listen: '[::]:1053'
  # IPV6解析开关；如果为false，将返回ipv6结果为空
  # ipv6: true
  ipv6: false
  use-system-hosts: true
  use-hosts: true
  # prefer-h3: true
  prefer-h3: false
  # DNS请求遵循规则路由，需配置 proxy-server-nameserver
  respect-rules: true
  # 模式：redir-host或fake-ip
  enhanced-mode: fake-ip
  # Fake-IP 解析地址池
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter-mode: blacklist
  # Fake-ip 过滤，列表中的域名返回真实IP
  fake-ip-filter:
    - "*"
    - "+.lan"
    - "+.local"
    - "+.localdomain"
    - "+.vivo.com.cn"
    - "geosite:cn"
    - "geosite:category-games"
    - "geosite:apple-cn"
    - "geosite:google-cn"
    # - "rule-set:private_domain,cn_domain"
    # 米家
    - "Mijia Cloud"
    # Xiaomi
    - "+.market.xiaomi.com"
    # windows 本地连接检测
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    # QQ登录
    - "localhost.ptlogin2.qq.com"
    - "localhost.sec.qq.com"
    - "+.qq.com"
    - "+.tencent.com"
    # Steam
    - "+.steamcontent.com"
    # Microsoft Xbox
    - "xbox.*.*.microsoft.com"
    - "*.*.xboxlive.com"
    - "xbox.*.microsoft.com"
    - "xnotify.xboxlive.com"
    # STUN
    - "stun.*.*"
    - "+.stun.*.*"
    - "+.stun.*.*.*"
    # Netflix
    - "+.nflxvideo.net"
    # Bilibili
    - "*.mcdn.bilivideo.cn"
    # ntp
    - "time.*.com"
    - "time.*.gov"
    - "time.*.edu.cn"
    - "time.*.apple.com"
    - "time-ios.apple.com"
    - "ntp.*.com"
    - "*.time.edu.cn"
    - "*.ntp.org.cn"
    - "*.pool.ntp.org"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "+.push.apple.com"
    - "5ddd.com"
    - "time1.cloud.tencent.com"
    - "WORKGROUP"
    - "+.kyarucloud.moe"
    - "+.dynv6.com"
  # # 解析非IP的dns用的dns服务器，只支持纯IP, 可为加密 DNS
  # default-nameserver:
  #   - https://223.5.5.5/dns-query
  #   - https://doh.pub/dns-query
  # 默认DNS服务器，支持udp/tcp/dot/doh/doq
  nameserver:
    # - system
    - 222.222.222.222
    - https://223.5.5.5/dns-query
    - https://doh.pub/dns-query
  # 代理节点域名解析服务器，仅用于解析代理节点的域名
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
    - https://doh.pub/dns-query
    - https://dns.google/dns-query
    # - https://8.8.8.8/dns-query
  # # 指定域名查询的解析服务器，可使用 geosite, 优先于 nameserver/fallback 查询
  # nameserver-policy:
  #   "geosite:cn,private":
  #     - https://doh.pub/dns-query
  #     - https://dns.alidns.com/dns-query
  #   "geosite:!cn,!private":
  #     - "tls://dns.google"
  #     - "tls://cloudflare-dns.com"

# 允许连接的 IP 地址段
lan-allowed-ips:
  - 0.0.0.0/0
  - ::/0
# 禁止连接的 IP 地址段
lan-disallowed-ips: []
# # http(s)/socks/mixed代理的用户验证的账号密码
# authentication:
#   - "mihomo:963."
#   - "nikki:963."
skip-auth-prefixes:
  - 127.0.0.1/32
  - 192.168.0.0/16

Proxy_first: &Proxy_first   {type: select, proxies: [默认代理, 全球直连, 手动选择, 自动选择]}
Direct_first: &Direct_first {type: select, proxies: [DIRECT, REJECT, 手动选择, 自动选择]}
Reject_first: &Reject_first {type: select, proxies: [REJECT, DIRECT, 手动选择, 自动选择]}
Include_all: &Include_all   {type: select, proxies: [手动选择, 全球直连, 负载均衡, 手动自动, 香港节点, 日本节点, 狮城节点, 美国节点, 广告拦截]}
self_lb: &self_lb {type: load-balance, include-all: true, filter: "(?i)(.*(⬇️|🌳)|(-([2-9]|[0-9][0-9]).[0-9]))", interval: 600, strategy: consistent-hashing, timeout: 8000, lazy: true}
# auto_select fallback
select_auto: &select_auto {<<: *Dingyue, proxies: [自动选择, 香港自动, 日本自动, 狮城自动, 美国自动]}
self_au: &self_au {type: url-test, include-all: true, interval: 600, timeout: 8000, tolerance: 100, lazy: true}
self_fb: &self_fb {type: fallback, include-all: true, interval: 600, timeout: 8000, tolerance: 100, lazy: true}
self_hk: &self_hk {<<: *Dingyue, filter: "(?i)🌳|港|🇭🇰|hk|hongkong|hong kong"}
self_jp: &self_jp {<<: *Dingyue, filter: "(?i)🌳|日|🇯🇵|jp|JP|japan"}
self_sg: &self_sg {<<: *Dingyue, filter: "(?i)🌳|新|🇸🇬|sg|singapore"}
self_us: &self_us {<<: *Dingyue, filter: "(?i)🌳|美|🇺🇸|us|unitedstates|united states"}
auto_hk: &auto_hk {<<: *Dingyue, type: url-test, filter: "(?i)🌳|港|🇭🇰|hk|hongkong|hong kong"}
auto_jp: &auto_jp {<<: *Dingyue, type: url-test, filter: "(?i)🌳|日|🇯🇵|jp|JP|japan"}
auto_sg: &auto_sg {<<: *Dingyue, type: url-test, filter: "(?i)🌳|新|🇸🇬|sg|singapore"}
auto_us: &auto_us {<<: *Dingyue, type: url-test, filter: "(?i)🌳|美|🇺🇸|us|unitedstates|united states"}
only_au: &only_au {type: url-test, filter: "(?i)🌳|港|🇭🇰|hk|hongkong|hong kong|日|🇯🇵|jp|JP|japan|新|🇸🇬|sg|singapore|美|🇺🇸|us|unitedstates|united states", include-all: true, interval: 600, timeout: 8000, tolerance: 100}

# https://github.com/Heart-Stealer/myclash/raw/main/icons/twitter.svg
# https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/twitter.svg

proxy-groups:
  - {name: 默认代理, <<: *Include_all,    icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/embedded.svg"}
  - {name: 手动选择, <<: *Dingyue,        icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/adjust.svg"}
  - {name: 漏网之鱼, <<: *Direct_first,   icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/fish.svg"}
  - {name: 全球直连, <<: *Direct_first,   icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/link.svg"}
  - {name: 广告拦截, <<: *Reject_first,   icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/block.svg"}
  - {name: 手动自动,    <<: *select_auto, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/recycle.svg"}
  - {name: 自动选择,    <<: *self_au,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/merry_go.svg"}
  - {name: 负载均衡,    <<: *self_lb,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/balance.svg"}
  - {name: 香港节点,    <<: *self_hk,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/flags/hk.svg"}
  - {name: 日本节点,    <<: *self_jp,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/flags/jp.svg"}
  - {name: 狮城节点,    <<: *self_sg,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/flags/sg.svg"}
  - {name: 美国节点,    <<: *self_us,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/flags/us.svg"}
  - {name: 香港自动,    <<: *auto_hk,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/recycle.svg"}
  - {name: 日本自动,    <<: *auto_jp,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/recycle.svg"}
  - {name: 狮城自动,    <<: *auto_sg,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/recycle.svg"}
  - {name: 美国自动,    <<: *auto_us,     icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/recycle.svg"}
  - {name: Amazon,      <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/amazon.svg"}
  - {name: Android,     <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/android.svg"}
  - {name: Cloudflare,  <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/cloudflare.svg"}
  - {name: Discord,     <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/discord.svg"}
  - {name: Disney,      <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/disney.svg"}
  - {name: EpicGames,   <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/epicgames.svg"}
  - {name: GitHub,      <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/github.svg"}
  - {name: Google,      <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/google.svg"}
  - {name: Google_Play, <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/google_play.svg"}
  - {name: Instagram,   <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/instagram.svg"}
  - {name: HBO,         <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/hbo.svg"}
  - {name: Meta,        <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/meta.svg"}
  - {name: NETFLIX,     <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/netflix.svg"}
  - {name: Openai,      <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/openai.svg"}
  - {name: Openwrt,     <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/openwrt.svg"}
  - {name: Proxy,       <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/embedded.svg"}
  - {name: Spotify,     <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/spotify.svg"}
  - {name: Steam,       <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/steam.svg"}
  - {name: Telegram,    <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/telegram.svg"}
  - {name: TikTok,      <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/tiktok.svg"}
  - {name: Twitch,      <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/twitch.svg"}
  - {name: Twitter,     <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/twitter.svg"}
  - {name: WhatsApp,    <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/whatsapp.svg"}
  - {name: X,           <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/x.svg"}
  - {name: Xbox,        <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/xbox.svg"}
  - {name: YouTube,     <<: *Proxy_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/youtube.svg"}

  # 安卓不能使用
  # - {name: GLOBAL,    <<: *Proxy_first}
  - {name: Apple,       <<: *Direct_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/apple.svg"}
  - {name: App_Store,   <<: *Direct_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/app_store.svg"}
  - {name: Bing,        <<: *Direct_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/bing.svg"}
  - {name: Microsoft,   <<: *Direct_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/microsoft.svg"}
  - {name: OneDrive,    <<: *Direct_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/onedrive.svg"}
  - {name: Speedtest,   <<: *Direct_first, icon: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/icons/speed.svg"}

# 优先级
# 规则将按照从上到下的顺序匹配，列表顶部的规则优先级高于其底下的规则
# 如请求为 udp，而代理节点没有 udp 支持 (例如ss节点没写udp: true),则会继续向下匹配

rules:
  - RULE-SET,aa-direct,全球直连
  - RULE-SET,aa-proxy0,默认代理
  - RULE-SET,aa-reject,广告拦截
  - RULE-SET,AD,广告拦截
  - RULE-SET,AD-Lite,广告拦截
  # - RULE-SET,EasyList,广告拦截
  # - RULE-SET,EasyListChina,广告拦截
  # - RULE-SET,ProgramAD,广告拦截
  # - DOMAIN,clash.razord.top,全球直连
  # - DOMAIN,yacd.haishan.me,全球直连
  # - DOMAIN,yacd.metacubex.one,全球直连
  # - DOMAIN,d.metacubex.one,全球直连
  # - DOMAIN,board.zash.run.place,全球直连
  # - DOMAIN,statics.woozooo.com,全球直连
  # - DOMAIN,ipw.cn,全球直连
  # # - DOMAIN,firmware-selector.immortalwrt.org,默认代理
  # - DOMAIN,objects.githubusercontent.com,全球直连

  # - DOMAIN-SUFFIX,kyarucloud.moe,默认代理
  # - DOMAIN-SUFFIX,eporner.com,默认代理
  # - DOMAIN-SUFFIX,googleapis.cn,默认代理
  # - DOMAIN-SUFFIX,xn--ngstr-lra8j.com,默认代理
  # - DOMAIN-SUFFIX,xn--ngstr-cn-8za9o.com,默认代理
  # - DOMAIN-SUFFIX,qichiyu.com,默认代理
  # - DOMAIN-SUFFIX,metacubex.one,默认代理

  # - DOMAIN-SUFFIX,gh-proxy.com,全球直连
  # - DOMAIN-SUFFIX,r2.cloudflarestorage.com,全球直连
  # - DOMAIN-SUFFIX,skyearth.xyz,全球直连
  # - DOMAIN-SUFFIX,doppiocdn.live,全球直连
  # - DOMAIN-SUFFIX,us-c.viayoo.com:443,全球直连
  # - DOMAIN-SUFFIX,vip8.3sybf.com:443,全球直连
  # - DOMAIN-SUFFIX,surrit.com,全球直连
  # - DOMAIN-SUFFIX,sixyik.com,全球直连
  # - DOMAIN-SUFFIX,javxxx.me,全球直连
  # - DOMAIN-SUFFIX,fapnfuck.com,全球直连
  # - DOMAIN-SUFFIX,cdnstatic.jappornxl.com,全球直连
  # - DOMAIN-SUFFIX,ap-drop-monst.mushroomtrack.com,全球直连

  - GEOSITE,category-ads-all,广告拦截
  - GEOSITE,category-games@cn,全球直连
  - GEOSITE,category-public-tracker,全球直连

  - RULE-SET,youtube_domain,YouTube
  - RULE-SET,google_domain,Google
  - RULE-SET,meta_domain,Meta
  - RULE-SET,ai_domain,Openai
  - RULE-SET,github_domain,GitHub
  - RULE-SET,onedrive_domain,OneDrive
  - RULE-SET,microsoft_domain,Microsoft
  - RULE-SET,telegram_domain,Telegram
  - RULE-SET,twitter_domain,Twitter
  - RULE-SET,steam_domain,Steam
  - RULE-SET,discord_domain,Discord
  # - RULE-SET,talkatone_domain,Talkatone
  # - RULE-SET,line_domain,LINE
  # - RULE-SET,signal_domain,Signal
  - RULE-SET,tiktok_domain,TikTok
  - RULE-SET,netflix_domain,NETFLIX
  # - RULE-SET,disneyplus_domain,Disney
  # - RULE-SET,hbo_domain,HBO
  # - RULE-SET,primevideo_domain,Primevideo

  - RULE-SET,apple_domain,Apple
  - RULE-SET,bing_domain,Bing
  - RULE-SET,cloudflare_domain,Cloudflare
  # - RULE-SET,chatgpt_domain,Openai
  # - RULE-SET,paypal_domain,PayPal
  # - RULE-SET,pixiv_domain,Pixiv
  - RULE-SET,speedtest_domain,Speedtest
  - RULE-SET,spotify_domain,Spotify
  # - RULE-SET,proxy_domain,Proxy

  # - RULE-SET,domestic_non_ip,全球直连
  - RULE-SET,direct_non_ip,全球直连
  - RULE-SET,lan_non_ip,全球直连
  ### IP 类规则
  - RULE-SET,lan_ip,全球直连
  - RULE-SET,domestic_ip,全球直连
  # - RULE-SET,china_ip,全球直连

  # - GEOSITE,amazon,Amazon
  # - GEOSITE,android,Android
  # - GEOSITE,cloudflare,Cloudflare
  # - GEOSITE,discord,Discord
  # - GEOSITE,disney,Disney
  # - GEOSITE,epicgames,EpicGames
  # - GEOSITE,github,GitHub
  # - GEOSITE,google,Google
  # - GEOSITE,google-play,Google_Play
  # - GEOSITE,google-cn,Google
  # - GEOSITE,instagram,Instagram
  # - GEOSITE,hbo,HBO
  # - GEOSITE,meta,Meta
  # - GEOSITE,netflix,NETFLIX
  # - GEOSITE,openai,Openai
  # - GEOSITE,openwrt,Openwrt
  # - GEOSITE,spotify,Spotify
  # - GEOSITE,steam,Steam
  # - GEOSITE,steam@cn,全球直连
  # - GEOSITE,telegram,Telegram
  # - GEOSITE,tiktok,TikTok
  # - GEOSITE,twitch,Twitch
  # - GEOSITE,twitter,Twitter
  # - GEOSITE,whatsapp,WhatsApp
  # - GEOSITE,x,X
  # - GEOSITE,xbox,Xbox
  # - GEOSITE,youtube,YouTube
  # - GEOSITE,gfw,默认代理

  # - GEOSITE,category-media-cn,全球直连
  # - GEOSITE,apple,Apple
  # - GEOSITE,apple@cn,Apple
  # - GEOSITE,apple-cn,Apple
  # - GEOSITE,bing,Bing
  # - GEOSITE,microsoft,Microsoft
  # - GEOSITE,microsoft@cn,Microsoft
  # - GEOSITE,onedrive,OneDrive
  # - GEOSITE,speedtest,Speedtest

  # - GEOIP,cloudflare,Cloudflare,no-resolve
  # # - GEOIP,github,GitHub,no-resolve
  # - GEOIP,google,Google,no-resolve
  # - GEOIP,netflix,NETFLIX,no-resolve
  # - GEOIP,steam,Steam,no-resolve
  # - GEOIP,telegram,Telegram,no-resolve
  # # - GEOIP,tiktok,TikTok,no-resolve
  # - GEOIP,twitch,Twitch,no-resolve
  # - GEOIP,twitter,Twitter,no-resolve
  # # - GEOIP,youtube,YouTube,no-resolve
  # - GEOIP,apple,Apple,no-resolve

  # 匹配来源 IP 所属国家代码
  # - SRC-GEOIP,cn,全球直连
  # 匹配来源 IP 所属 ASN
  # - SRC-IP-ASN,9808,全球直连
  # 匹配来源 IP 后缀范围
  # - SRC-IP-SUFFIX,192.168.1.201/8,全球直连
  # 匹配请求目标端口范围
  - DST-PORT,22,全球直连
  # 匹配请求来源端口范围
  # - SRC-PORT,7777,全球直连
  # # 匹配目标 IP 地址范围
  # - IP-CIDR,10.0.0.0/8,全球直连
  # - IP-CIDR,172.16.0.0/12,全球直连
  # - IP-CIDR,192.168.0.0/16,全球直连
  # - IP-CIDR,100.64.0.0/10,全球直连
  # - IP-CIDR,127.0.0.0/8,全球直连
  - RULE-SET,private_domain,全球直连
  - GEOSITE,private,全球直连
  # - GEOIP,private,全球直连,no-resolve
  - IP-CIDR,10.0.0.0/8,全球直连
  - IP-CIDR,172.16.0.0/12,全球直连
  - IP-CIDR,192.168.0.0/16,全球直连
  - IP-CIDR,100.64.0.0/10,全球直连
  - IP-CIDR,127.0.0.0/8,全球直连
  - MATCH,漏网之鱼
  
rule-anchor:
# mihomo rule-set 规则集文件，格式为 .yaml（format: yaml）、.list（format: text） 和 .mrs（format: mrs）
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  ip_text: &ip_text {type: http, interval: 86400, behavior: ipcidr, format: text}
  ip_yaml: &ip_yaml {type: http, interval: 86400, behavior: ipcidr, format: yaml}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  domain_text: &domain_text {type: http, interval: 86400, behavior: domain, format: text}
  domain_yaml: &domain_yaml {type: http, interval: 86400, behavior: domain, format: yaml}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
  class_yaml: &class_yaml {type: http, interval: 86400, behavior: classical, format: yaml}
  class_yaml_file: &class_yaml_file {type: file, interval: 86400, behavior: classical, format: yaml}

# 规则订阅
rule-providers:
# https://github.com/Heart-Stealer/myclash/raw/refs/heads/main/
# https://raw.githubusercontent.com/Heart-Stealer/myclash/refs/heads/main/
  # aa-direct: { <<: *class_yaml, path: "./rule-providers/aa-direct.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/mihomo/rules/aa-direct.yaml"}
  # aa-proxy0: { <<: *class_yaml, path: "./rule-providers/aa-proxy0.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/mihomo/rules/aa-proxy.yaml"}
  # aa-reject: { <<: *class_yaml, path: "./rule-providers/aa-reject.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/mihomo/rules/aa-reject.yaml"}
  aa-direct: { <<: *class_yaml, path: "./rule-providers/aa-direct.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/rules/aa-direct.yaml"}
  aa-proxy0: { <<: *class_yaml, path: "./rule-providers/aa-proxy0.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/rules/aa-proxy0.yaml"}
  aa-reject: { <<: *class_yaml, path: "./rule-providers/aa-reject.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/Heart-Stealer/myclash/main/rules/aa-reject.yaml"}
  # aa-direct: { <<: *class_yaml_file, path: ./rule-providers/aa-direct.yaml}
  # aa-proxy0: { <<: *class_yaml_file, path: ./rule-providers/aa-proxy0.yaml}
  # aa-reject: { <<: *class_yaml_file, path: ./rule-providers/aa-reject.yaml}
  # 内网域名和局域网 IP
  lan_non_ip:
    <<: *domain_text
    url: https://ruleset.skk.moe/Clash/non_ip/lan.txt
    path: ./rule-providers/lan_non_ip.txt
  lan_ip:
    <<: *domain_text
    url: https://ruleset.skk.moe/Clash/ip/lan.txt
    path: ./rule-providers/lan_ip.txt
  
  # domestic_non_ip:
  #   <<: *domain_text
  #   url: https://ruleset.skk.moe/Clash/non_ip/domestic.txt
  #   path: ./rule-providers/domestic_non_ip.txt
  direct_non_ip:
    <<: *domain_text
    url: https://ruleset.skk.moe/Clash/non_ip/direct.txt
    path: ./rule-providers/direct_non_ip.txt
  # global_non_ip:
  #   <<: *domain_text
  #   url: https://ruleset.skk.moe/Clash/non_ip/global.txt
  #   path: ./rule-providers/global_non_ip.txt
  domestic_ip:
    <<: *domain_text
    url: https://ruleset.skk.moe/Clash/ip/domestic.txt
    path: ./rule-providers/domestic_ip.txt

  # china_ip:
  #   <<: *domain_text
  #   url: https://ruleset.skk.moe/Clash/ip/china_ip.txt
  #   path: ./rule-providers/china_ip.txt

  # AD:
  #   <<: *domain_yaml
  #   path: ./rule-providers/AD.yaml
  #   url: https://gh-proxy.com/https://raw.githubusercontent.com/217heidai/adblockfilters/main/rules/adblockmihomo.yaml
  AD-Lite:
    <<: *domain_yaml
    path: ./rule-providers/AD-Lite.yaml
    url: https://gh-proxy.com/https://raw.githubusercontent.com/217heidai/adblockfilters/main/rules/adblockmihomolite.yaml
  AD:
    <<: *domain_yaml
    path: ./rule-providers/AD.yaml
    url: https://gh-proxy.com/https://github.com/earoftoast/clash-rules/raw/main/AD.yaml
  # EasyList:
  #   <<: *domain_yaml
  #   path: ./rule-providers/EasyList.yaml
  #   url: https://gh-proxy.com/https://github.com/earoftoast/clash-rules/raw/main/EasyList.yaml
  EasyListChina:
    <<: *domain_yaml
    path: ./rule-providers/EasyListChina.yaml
    url: https://gh-proxy.com/https://github.com/earoftoast/clash-rules/raw/main/EasyListChina.yaml
  EasyPrivacy:
    <<: *domain_yaml
    path: ./rule-providers/EasyPrivacy.yaml
    url: https://gh-proxy.com/https://github.com/earoftoast/clash-rules/raw/main/EasyPrivacy.yaml
  ProgramAD:
    <<: *domain_yaml
    path: ./rule-providers/ProgramAD.yaml
    url: https://gh-proxy.com/https://github.com/earoftoast/clash-rules/raw/main/ProgramAD.yaml
  # bilibili_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo-lite/geoip/bilibili.mrs" }
  # AD: { <<: *domain_yaml, path: "./rule-providers/AD.yaml", url: "https://gh-proxy.com/https://github.com/earoftoast/clash-rules/raw/main/AD.yaml"}
# https://github.com/MetaCubeX/meta-rules-dat/raw/meta/geo/geosite/facebook.mrs
# https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/raw/meta/geo/geosite/facebook.mrs
# https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/facebook.mrs
# https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/raw/meta/geo/geosite/facebook.mrs
# https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geosite/cloudflare.srs
  ai_domain: { <<: *domain, path: './rule-providers/category-ai-!cn.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-!cn.mrs' }
  amazon_domain: { <<: *domain, path: './rule-providers/amazon.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/amazon.mrs' }
  android_domain: { <<: *domain, path: './rule-providers/android.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/android.mrs' }
  # chatgpt_domain: { <<: *domain, path: './rule-providers/chatgpt.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/chatgpt.mrs' }
  cloudflare_domain: { <<: *domain, path: './rule-providers/cloudflare.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cloudflare.mrs' }
  discord_domain: { <<: *domain, path: './rule-providers/discord.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/discord.mrs' }
  # disneyplus_domain: { <<: *domain, path: './rule-providers/disneyplus.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/disney.mrs' }
  # epic_domain: { <<: *domain, path: './rule-providers/epic.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/epic.mrs' }
  facebook_domain: { <<: *domain, path: './rule-providers/facebook.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/facebook.mrs' }
  github_domain: { <<: *domain, path: './rule-providers/github.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs' }
  google_domain: { <<: *domain, path: './rule-providers/google.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs' }
  google_play_domain: { <<: *domain, path: './rule-providers/google-play.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google-play.mrs' }
  instagram_domain: { <<: *domain, path: './rule-providers/instagram.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/instagram.mrs' }
  meta_domain: { <<: *domain, path: './rule-providers/meta.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/meta.mrs' }
  netflix_domain: { <<: *domain, path: './rule-providers/netflix.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs' }
  openwrt_domain: { <<: *domain, path: './rule-providers/openwrt.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/openwrt.mrs' }
  spotify_domain: { <<: *domain, path: './rule-providers/spotify.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.mrs' }
  steam_domain: { <<: *domain, path: './rule-providers/steam.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs' }
  telegram_domain: { <<: *domain, path: './rule-providers/telegram.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs' }
  tiktok_domain: { <<: *domain, path: './rule-providers/tiktok.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs' }
  twitch_domain: { <<: *domain, path: './rule-providers/twitch.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/twitch.mrs' }
  twitter_domain: { <<: *domain, path: './rule-providers/twitter.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/twitter.mrs' }
  whatsapp_domain: { <<: *domain, path: './rule-providers/whatsapp.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/whatsapp.mrs' }
  x_domain: { <<: *domain, path: './rule-providers/x.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/x.mrs' }
  xbox_domain: { <<: *domain, path: './rule-providers/xbox.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/xbox.mrs' }
  youtube_domain: { <<: *domain, path: './rule-providers/youtube.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs' }
  apple_domain: { <<: *domain, path: './rule-providers/apple.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs' }
  # app_store_domain: { <<: *domain, path: './rule-providers/app-store.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/app-store.mrs' }
  bing_domain: { <<: *domain, path: './rule-providers/bing.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bing.mrs' }
  microsoft_domain: { <<: *domain, path: './rule-providers/microsoft.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs' }
  onedrive_domain: { <<: *domain, path: './rule-providers/onedrive.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs' }
  speedtest_domain: { <<: *domain, path: './rule-providers/speedtest.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/speedtest.mrs' }
  private_domain: { <<: *domain, path: './rule-providers/private.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs' }
  # proxy_domain: { <<: *domain, path: './rule-providers/proxy.mrs', url: 'https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/proxy.mrs' }

  # private_domain: { <<: *domain_yaml, path: "./providers/rules/private_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.yaml"}
  # proxylite: { <<: *class_yaml, path: "./providers/rules/proxylite.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/master/ProxyLite.list"}
  # ai: {  <<: *domain_yaml, path: "./providers/rules/ai.yaml", url: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.yaml" }
  # youtube_domain: { <<: *domain_yaml, path: "./providers/rules/youtube_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.yaml"}
  # google_domain: { <<: *domain_yaml, path: "./providers/rules/google_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.yaml"}
  # github_domain: { <<: *domain_yaml, path: "./providers/rules/github_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.yaml"}
  # telegram_domain: { <<: *domain_yaml, path: "./providers/rules/telegram_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.yaml"}
  # netflix_domain: { <<: *domain_yaml, path: "./providers/rules/netflix_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.yaml"}
  # paypal_domain: { <<: *domain_yaml, path: "./providers/rules/paypal_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.yaml"}
  # onedrive_domain: { <<: *domain_yaml, path: "./providers/rules/onedrive_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.yaml"}
  # microsoft_domain: { <<: *domain_yaml, path: "./providers/rules/microsoft_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.yaml"}
  # apple_domain: { <<: *domain_yaml, path: "./providers/rules/apple_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.yaml"}
  # speedtest_domain: { <<: *domain_yaml, path: "./providers/rules/speedtest_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.yaml"}
  # tiktok_domain: { <<: *domain_yaml, path: "./providers/rules/tiktok_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.yaml"}
  # gfw_domain: { <<: *domain_yaml, path: "./providers/rules/gfw_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.yaml"}
  # geolocation-!cn: { <<: *domain_yaml, path: "./providers/rules/geolocation", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.yaml"}
  # cn_domain: { <<: *domain_yaml, path: "./providers/rules/cn_domain.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.yaml"}

  # cn_ip: { <<: *ip_yaml, path: "./providers/rules/cn_ip.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.yaml"}
  # google_ip: { <<: *ip_yaml, path: "./providers/rules/google_ip.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.yaml"}
  # telegram_ip: { <<: *ip_yaml, path: "./providers/rules/telegram_ip.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.yaml"}
  # netflix_ip: { <<: *ip_yaml, path: "./providers/rules/netflix_ip.yaml", url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.yaml"}
