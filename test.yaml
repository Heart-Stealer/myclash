
#---------------------------------------------------#
## 配置文件需要放置在 $HOME/.config/clash/config.yml
## 
## 如果您不知道如何操作，请参阅 Dreamacro / clash 的 Wiki：
## https://github.com/Dreamacro/clash/wiki
#---------------------------------------------------#
# HTTP 代理端口
# port: 7890
# SOCKS5 代理端口
# socks-port: 7891
# HTTP SOCKS5 使用一个接口进行代理
mixed-port: 7890
# Linux 和 macOS 的 redir 代理端口 (如需使用此功能，请取消注释)
# redir-port: 7892
# 允许局域网的连接（可用来共享代理）
allow-lan: true
# bind-address: "*"
# 此功能仅在 allow-lan 设置为 true 时生效，支持三种参数：
# "*"                           绑定所有的 IP 地址
# 192.168.122.11                绑定一个的 IPv4 地址
# "[aaaa::a8aa:ff:fe09:57d8]"   绑定一个 IPv6 地址
# 规则模式：Rule（规则） / Global（全局代理）/ Direct（全局直连）
mode: Rule
# 5 个级别：silent / debug / info / warning / error /。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。
log-level: info
ipv6: true
# clash web 控制的 RESTful API
external-controller: '127.0.0.1:9090'
# 您可以将静态网页资源（如 clash-dashboard）放置在一个目录中，clash 将会服务于 `${API}/ui`
# 参数应填写配置目录的相对路径或绝对路径。
# external-ui: folder
# RESTful API 的口令 (可选)
# secret: 
# # 实验性功能 hosts, 支持通配符 (例如 *.clash.dev 甚至 *.foo.*.example.com)
# # 静态的域名 比 通配域名 具有更高的优先级 (foo.example.com 优先于 *.example.com)
# # 注意: hosts 在 fake-ip 模式下不生效
# hosts:
#   '*.clash.dev': 127.0.0.1
hosts:
  'localhost': 127.0.0.1
dns:
  enabled: true
  ipv6: false
  # listen: 0.0.0.0:53
  listen: '0.0.0.0:53'
  # enhanced-mode: redir-host # 或 fake-ip
  enhanced-mode: fake-ip
  # # fake-ip-range: 198.18.0.1/16 # 如果你不知道这个参数的作用，请勿修改
  fake-ip-range: 198.18.0.1/16 # 如果你不知道这个参数的作用，请勿修改
  use-hosts: true
  nameserver:
    - 1.2.4.8 # 1.2.4.8
    - 223.5.5.5 # 阿里云 DNS （偏爱）
    - 223.6.6.6 # 阿里云 DNS （偏爱）
    - 119.29.29.29 # DNSPod DNS （偏爱）
    - 180.76.76.76 # 百度云 DNS
    - 183.60.83.19 # 腾讯云 DNS
    - 183.60.82.98 # 腾讯云 DNS
    - 114.114.114.114 # 114 DNS
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query
    - tls://13800000000.rubyfish.cn:853
    - https://13800000000.rubyfish.cn/
  # fallback: # 与 nameserver 内的服务器列表同时发起请求，当规则符合 GEOIP 在 CN 以外时，fallback 列表内的域名服务器生效。
  fallback:
    - 8.8.8.8 # Google DNS （偏爱）
    - 8.8.4.4 # Google DNS （偏爱）
    - tls://1.0.0.1:853 # （偏爱）
    - tls://8.8.4.4:853
    - tls://dns.google:853 # （偏爱）
    - tls://13800000000.rubyfish.cn:853
    - https://doh.dns.sb/dns-query
    - https://dns.twnic.tw/dns-query
    - https://dns.cloudflare.com/dns-query
  fallback-filter: {geoip: true, ipcidr: [240.0.0.0/4, 0.0.0.0/32 ]}
  # fallback-filter:
  #   geoip: true # 默认
  #   ipcidr:
  #     # 在这个网段内的 IP 地址会被考虑为被污染的 IP
  #     - 240.0.0.0/4
  # 1. clash DNS 请求逻辑：
  # (1) 当访问一个域名时， nameserver 与 fallback 列表内的所有服务器并发请求，得到域名对应的 IP 地址。
  # (2) clash 将选取 nameserver 列表内，解析最快的结果。
  # (3) 若解析结果中，IP 地址属于 国外，那么 clash 将选择 fallback 列表内，解析最快的结果。
  #
  # 因此，我在 nameserver 和 fallback 内都放置了无污染、解析速度较快的国内 DNS 服务器，以达到最快的解析速度。
  # 但是 fallback 列表内服务器会用在解析境外网站，为了结果绝对无污染，我仅保留了支持 DoT/DoH 的两个服务器。
  #
  # 2. clash DNS 配置注意事项：
  # (1) 如果您为了确保 DNS 解析结果无污染，请仅保留列表内以 tls:// 或 https:// 开头的 DNS 服务器，但是通常对于国内域名没有必要。
  # (2) 如果您不在乎可能解析到污染的结果，更加追求速度。请将 nameserver 列表的服务器插入至 fallback 列表内，并移除重复项。
  #
  # 3. 关于 DNS over HTTPS (DoH) 和 DNS over TLS (DoT) 的选择：
  #  对于两项技术双方各执一词，而且会无休止的争论，各有利弊。各位请根据具体需求自行选择，但是配置文件内默认启用 DoT，因为目前国内没有封锁或管制。
  #  DoH: 以 https:// 开头的 DNS 服务器。拥有更好的伪装性，且几乎不可能被运营商或网络管理封锁，但查询效率和安全性可能略低。
  #  DoT: 以 tls:// 开头的 DNS 服务器。拥有更高的安全性和查询效率，但端口有可能被管制或封锁。
  #  若要了解更多关于 DoH/DoT 相关技术，请自行查阅规范文档。
proxies:
  # - {name: 名称、别名, type: ssr, server: 服务器地址, port: 服务器端口接口, password: 密码, cipher: 加密方式, protocol: 协议, protocol-param: "协议参数", obfs: 混淆, obfs-param: "混淆参数", udp: true/false}
  # - {name: 名称、别名, type: vmess, server: 服务器地址, port: 80服务器端口接口, uuid: 用户ID只为验证不加密, alterId: 0额外ID验证, cipher: auto加密方式自动, tls: true/false是否进行tls加密传输层安全, skip-cert-verify: true/false是否跳过验证, network: ws底层传输方式, ws-opts: {path: /路径, headers: {Host: 请求头伪装域名}}, udp: true/false}
  - {"name":"_🇺🇸 美国 凤凰城-4K喵哥","type":"vmess","server":"129.146.247.135","port":14038,"cipher":"auto","uuid":"7949f11e-b1d8-4217-b259-9bc2d2af2c25","alterId":0,"tls":false,"skip-cert-verify":true,"servername":"","network":"tcp", udp: true}
  - {"name":"_🇸🇬 新加坡甲骨文","type":"vmess","server":"168.138.174.249","port":41921,"cipher":"auto","uuid":"2308da67-868d-4bc0-e040-aa087a57312f","alterId":0,"tls":false,"skip-cert-verify":true,"servername":"","network":"ws","ws-opts":{"path":"/ssss"}}
  - {"name":"_🇺🇸 美国 凤凰城|4K","type":"vmess","server":"cf.yxjnode.com","port":80,"cipher":"auto","uuid":"09c1d32d-4458-4ebf-b36d-4dd732bae3aa","alterId":0,"tls":false,"skip-cert-verify":true,"network":"ws","ws-opts":{"path":"/yxzbp","headers":{"host":"dp1.yxjnode.com"}}}
  - {"name":"荷兰4-4K","type":"vmess","server":"156.225.67.126","port":443,"cipher":"auto","uuid":"3a3c8a9c-334e-4360-adb8-a80a57ddcbbf","alterId":64,"tls":true,"skip-cert-verify":true,"servername":"www.16046626.xyz","network":"ws","ws-opts":{"path":"/path/131816182113","headers":{"host":"www.16046626.xyz"}}}
  - {name: _🇮🇳 印度-4K, server: 152.70.74.66, port: 443, type: trojan, password: d906afe5-7c3c-4ddc-aaa4-61c154a82e5e, skip-cert-verify: true, udp: true}
  - {"name":"🇹🇼 BGP|台湾3\r","type":"trojan","server":"bgptw3.cnamazon.sbs","port":443,"udp":true,"password":"c0508331-3ed5-48df-adb4-6d90758c6f5e","sni":"tlsdata.cnamazon.sbs","skip-cert-verify":false}
  - {"name":"🇹🇼 BGP|台湾5\r","type":"trojan","server":"bgptw5.cnamazon.sbs","port":443,"udp":true,"password":"c0508331-3ed5-48df-adb4-6d90758c6f5e","sni":"tlsdata.cnamazon.sbs","skip-cert-verify":false}
  - {name: _🇺🇸 美国40-1K, server: 104.21.53.35, port: 80, type: vmess, uuid: 09c1d32d-4458-4ebf-b36d-4dd732bae3aa, alterId: 0, cipher: auto, tls: false, network: ws, ws-opts: {path: /yxzbp, headers: {Host: buyvm1.yxjnode.com}}, udp: true}
  - {name: _🇲🇾 马来西亚 美国-1K, server: my.mjt001.com, port: 443, type: trojan, password: af4dc66a-ec88-4057-9e46-777b584577f7, udp: true}
  - {name: _🇺🇦 乌克兰-1K, server: ua.mjt001.com, port: 443, type: trojan, password: af4dc66a-ec88-4057-9e46-777b584577f7, sni: ua.mjt001.com, udp: true}

  - {"name":"_🇯🇵 日本","type":"vmess","server":"zfc.windowsupdate1.com","port":443,"cipher":"auto","uuid":"60454f67-7e28-4ddd-855f-e8216dfedf5a","alterId":0,"tls":true,"skip-cert-verify":true,"servername":"jp1.hnokkdf.top","network":"ws","ws-opts":{"path":"/kbjc/jp1","headers":{"host":"jp1.hnokkdf.top"}}}
  - {"name":"_🇺🇸 美国直连|","type":"vmess","server":"140.99.4.120","port":11128,"cipher":"auto","uuid":"d688b6f0-6458-42a9-863d-011c146eead6","alterId":0,"tls":false,"skip-cert-verify":true,"servername":"","network":"ws","ws-opts":{"path":"/"}}
  - {"name":"US-DP1-HTTP","type":"vmess","server":"cf-lt.sharecentre.online","port":80,"cipher":"auto","uuid":"2d5d8b9c-8ec4-4a37-b610-78e71e13eaef","alterId":0,"tls":false,"skip-cert-verify":true,"network":"ws","ws-opts":{"path":"/shirker","headers":{"host":"dp1.scproxy.top"}}}
  - {"name":"US-DP3-HTTP","type":"vmess","server":"cf-lt.sharecentre.online","port":80,"cipher":"auto","uuid":"2d5d8b9c-8ec4-4a37-b610-78e71e13eaef","alterId":0,"tls":false,"skip-cert-verify":true,"network":"ws","ws-opts":{"path":"/shirker","headers":{"host":"dp3.scproxy.top"}}}

  - {name: 🇺🇲 美国 01, server: 163.123.192.153, port: 443, type: trojan, password: 194e456a-68d2-4f05-b554-c7282d32abae, sni: download.xn--mes358a9urctx.com, skip-cert-verify: false}
  - {name: 🇺🇲 美国(ChatGPT) 10, server: cf-lt.sharecentre.online, port: 80, type: vmess, uuid: 2d5d8b9c-8ec4-4a37-b610-78e71e13eaef, alterId: 0, cipher: auto, tls: false, skip-cert-verify: false, network: ws, ws-opts: {path: /shirker, headers: {Host: dp1.scproxy.top}}}
  - {name: 🇨🇳 台湾(ChatGPT) 02, server: 02-1.qqingca.cc, port: 20384, type: ss, cipher: chacha20-ietf-poly1305, password: 27e2f037-effd-493a-bd28-6004cd9ff1cf}
proxy-groups:
 # 🚀 节点选择 🔰 节点选择 ⚖️ 负载均衡 🎥 NETFLIX 🎯 全球直连 🛑 全球拦截 ⛔️ 广告拦截
 # 🚫 运营劫持 🌍 国外媒体 🌏 国内媒体 📲 电报信息 🍎 苹果服务 🐟 漏网之鱼
 # - name: 自定名称
 # type: #模式类型 select（用户选择）、url-test（节点延迟检查排序）、load-balance（负载均衡）
 # url: （需要进行测速的网址）
 # interval: （测试间隔时间，单位秒s）
 # strategy: consistent-hashing或者round-robin（负载均衡选择节点的方法。）
 # #（有consistent-hashing哈希值算法，保证一个二级域名使用同一个节点；有round-robin顺序轮询，每次连接会有不同的节点）
 # proxies: （节点名称，必须严格一致）
 # ⚖️ 负载均衡-散列 strategy: consistent-hashing
 # ⚖️ 负载均衡-轮询 strategy: round-robin